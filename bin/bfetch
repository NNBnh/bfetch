#!/bin/sh

#     ____
#    / __ )___    __      __
#   / __  / _/__ / /_____/ /
#  / /_/ / _/ -_) __/ __/ _ \
# /_____/_/ \__/\__/\__/_//_/

# File:         bfetch
# Description:  Dynamic fetch displayer that SuperB
# Author:       NNB
#               └─ https://github.com/NNBnh
# URL:          https://github.com/NNBnh/bfetch
# License:      GPLv3

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.


# Values
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
TMPDIR="${TMPDIR:-/tmp}"

if [ -f "$XDG_CONFIG_HOME/bfetch/info"  ]; then INFO_COMMANDS="${BFETCH_INFO-$XDG_CONFIG_HOME/bfetch/info}"   ; else INFO_COMMANDS="$BFETCH_INFO"  ; fi
if [ -f "$XDG_CONFIG_HOME/bfetch/art"   ]; then ART_COMMANDS="${BFETCH_ART-$XDG_CONFIG_HOME/bfetch/art}"      ; else ART_COMMANDS="$BFETCH_ART"    ; fi
if [ -f "$XDG_CONFIG_HOME/bfetch/color" ]; then COLOR_COMMANDS="${BFETCH_COLOR-$XDG_CONFIG_HOME/bfetch/color}"; else COLOR_COMMANDS="$BFETCH_COLOR"; fi

TEMPORARY="${BFETCH_TEMPORARY-$TMPDIR/bfetch_}$$"
CLASSIC_MODE="${BFETCH_CLASSIC_MODE:-false}"
CLASSIC_ART_RIGHT="${BFETCH_ART_RIGHT:-false}"
PADDING="${BFETCH_PADDING:-1}"
SEPARATOR="${BFETCH_SEPARATOR:-2}"
PROMPT_HEIGHT="${BFETCH_PROMPT_HEIGHT:-1}"
TERM_SIZE=$(stty size)
TERM_HEIGHT="${TERM_SIZE% *}"
TERM_WIDTH="${TERM_SIZE#* }"

if [ "$CLASSIC_ART_RIGHT" = 'true' ]; then order='info_color art'; else order='art info_color'; fi

for element in INFO ART COLOR; do
	eval "${element}_HEIGHT='0'"
	eval "${element}_WIDTH='0'"
done


# Functions
bfetch_help() {
	INFO_COMMANDS="printf \"${1:+Bfetch: $1\n\n\n} SuperB Fetch is a SuperB general-purpose fetch displayer
written in pure sh that take user commands output
and change how it display dynamic with the terminal size.

USAGE: bfetch

CONFIGURATION:
SuperB Fetch is configured through environment variables:
    export BFETCH_<SETTING>=\\\"<value>\\\"

BFETCH_INFO=\\\"<commands>\\\"
    Read this commands output as infomation element.
BFETCH_ART=\\\"<commands>\\\"
    Read this commands output as art element.
BFETCH_COLOR=\\\"<commands>\\\"
    Read this commands output as color element.
BFETCH_TEMPORARY=\\\"<path/to/file>\\\"
    Temporary file's location.
BFETCH_CLASSIC_MODE=\\\"[true|false]\\\"
    Make SuperB Fetch prefer classic mode when both mode are true.
BFETCH_ART_RIGHT=\\\"[true|false]\\\"
    Render art on the right when using classic mode.
BFETCH_PADDING=\\\"0+\\\"
    Padding fetch when using classic mode.
BFETCH_SEPARATOR=\\\"0+\\\"
    Separate info and art when using classic mode.
BFETCH_PROMPT_HEIGHT=\\\"0+\\\"
    Acknowledge how high the shell prompt is and counter it
    so the prompt don't push the fetch out.\""
}

bfetch_logo() {
	ART_COMMANDS="printf \"    ____
   / __ )___    __      __
  / __  / _/__ / /_____/ /
 / /_/ / _/ -_) __/ __/ _ \\\\
/_____/_/ \\\\__/\\\\__/\\\\__/_//_/\""
}

print_textart() {
	element_padded=$(printf '%s' "$1" | sed -e "s/^/${2:+\\\\033[${2}C}/g" -e 's/%/%%/g' -e 's/\\\\/\\\\\\/g')

	print="$print\\033[0m$element_padded"
}

fetch_classic() {
	FETCH_PADDING=$(( fetch_padding_check < PADDING ? fetch_padding_check : PADDING ))

	group_padding='0'

	for group in $order; do
		case $group in
			'art')
				[ "$reset" = 'true' ] && print="$print\\033[9999999D\\033[$(( group_height - 1 ))A"
				print_textart "$TEXTART_ART" $(( FETCH_PADDING + group_padding ))

				group_height="$ART_HEIGHT"
				group_padding=$(( ART_WIDTH + 1 + SEPARATOR ))
				reset='true'
			;;
			'info_color')
				[ "$reset" = 'true' ] && print="$print\\033[9999999D\\033[$(( group_height - 1 ))A"
				print_textart "$TEXTART_INFO" $(( FETCH_PADDING + group_padding ))
				info_color_height="$INFO_HEIGHT"

				[ "$modul_color" = 'true' ] && {
					print="$print \\n\\n"
					print_textart "$TEXTART_COLOR" $(( FETCH_PADDING + group_padding ))
					info_color_height=$(( INFO_HEIGHT + 1 + COLOR_HEIGHT ))
				}

				group_height="$info_color_height"
				group_padding=$(( ( ART_HEIGHT > INFO_HEIGHT ? INFO_COLOR_WIDTH : INFO_WIDTH ) + 1 + SEPARATOR ))
				reset='true'
			;;
		esac
	done

	fetch_end=$(( ( ART_HEIGHT > info_color_height ? ART_HEIGHT : info_color_height ) - group_height ))
	[ "$fetch_end" -gt '0' ] && print="$print\\033[${fetch_end}B"
}

fetch_paper() {
	[ "$modul_art" = 'true' ] && print_textart "$TEXTART_ART" $(( ( TERM_WIDTH - ART_WIDTH ) / 2 ))

	print="$print \\n\\n"
	print_textart "$TEXTART_INFO" $(( ( TERM_WIDTH - INFO_WIDTH ) / 2 ))

	[ "$modul_color" = 'true' ] && {
		print="$print \\n\\n"
		print_textart "$TEXTART_COLOR" $(( ( TERM_WIDTH - COLOR_WIDTH ) / 2 ))
	}
}


# Start
if [ -n "$1" ]; then
	bfetch_help
	bfetch_logo
elif [ -z "$INFO_COMMANDS" ]; then
	bfetch_help 'Info element commands is not found'
	bfetch_logo
elif [ ! "$PADDING" -ge '0' ]; then
	PADDING='1'
	bfetch_help 'Padding must be 0+'
	bfetch_logo
elif [ ! "$SEPARATOR" -ge '0' ]; then
	SEPARATOR='2'
	bfetch_help 'Separator must be 0+'
	bfetch_logo
elif [ ! "$PROMPT_HEIGHT" -ge '0' ]; then
	PROMPT_HEIGHT='1'
	bfetch_help 'Prompt height must be 0+'
	bfetch_logo
fi

used_height="$PROMPT_HEIGHT"
used_width='0'

for element in INFO ART COLOR; do
	eval "[ -n \"\$${element}_COMMANDS\" ]" && {
		eval "export BFETCH_${element}_HEIGHT=\$(( TERM_HEIGHT - used_height ))"
		eval "export BFETCH_${element}_WIDTH=\$(( TERM_WIDTH - used_width ))"

		if [ -x "$(command -v unbuffer)" ]; then
			eval "TEXTART_$element=\$(unbuffer -p \"\$${element}_COMMANDS\")"
		else
			eval "TEXTART_$element=\$(script --quiet /dev/null --command \"\$${element}_COMMANDS\")"
		fi
		
		eval "printf '%s' \"\$TEXTART_$element\" | sed -e 's/\x1B\[[0-9;]*[JKmsu]//g' -e 's/./-/g'" > "$TEMPORARY"

		height='0'
		width='0'

		while IFS= read -r line || [ -n "$line" ]; do
			eval "${element}_HEIGHT=\$(( ${element}_HEIGHT + 1 ))"
			eval "${element}_WIDTH=\$(( ( \${#line} - 1 ) > ${element}_WIDTH ? ( \${#line} - 1 ) : ${element}_WIDTH ))"
		done < "$TEMPORARY"

		INFO_COLOR_WIDTH=$(( INFO_WIDTH > COLOR_WIDTH ? INFO_WIDTH : COLOR_WIDTH ))

		modul_art='false'
		modul_color='false'

		if [ "$TERM_HEIGHT" -ge $(( INFO_HEIGHT + 1 + ART_HEIGHT + 1 + COLOR_HEIGHT + PROMPT_HEIGHT )) ] && [ "$TERM_WIDTH" -ge $(( INFO_WIDTH + SEPARATOR + ART_WIDTH )) ]; then
			[ -n "$ART_COMMANDS"   ] && modul_art='true'
			[ -n "$COLOR_COMMANDS" ] && modul_color='true'

			if [ "$CLASSIC_MODE" = 'true' ]; then mode='classic'; else mode='paper'; fi
		elif [ "$TERM_HEIGHT" -ge $(( ART_HEIGHT + PROMPT_HEIGHT )) ] && [ "$TERM_WIDTH" -ge $(( ( ART_HEIGHT > INFO_HEIGHT ? INFO_COLOR_WIDTH : INFO_WIDTH ) + SEPARATOR + ART_WIDTH )) ] && [ -n "$ART_COMMANDS" ]; then
			modul_art='true'

			fetch_padding_check=$(( TERM_WIDTH - ( ART_WIDTH + ( ART_HEIGHT > INFO_HEIGHT ? INFO_COLOR_WIDTH : INFO_WIDTH ) + SEPARATOR ) ))

			[ "$TERM_HEIGHT" -ge $(( INFO_HEIGHT + 1 + COLOR_HEIGHT + PROMPT_HEIGHT )) ] && [ -n "$COLOR_COMMANDS" ] && modul_color='true'

			mode='classic'
		else
			if [ "$TERM_HEIGHT" -ge $(( INFO_HEIGHT + 1 + ART_HEIGHT + 1 + COLOR_HEIGHT + PROMPT_HEIGHT )) ] && [ -n "$ART_COMMANDS" ] && [ -n "$COLOR_COMMANDS" ]; then
				modul_art='true'
				modul_color='true'
			elif [ "$TERM_HEIGHT" -ge $(( INFO_HEIGHT + 1 + ART_HEIGHT + PROMPT_HEIGHT )) ] && [ -n "$ART_COMMANDS" ]; then
				modul_art='true'
			elif [ "$TERM_HEIGHT" -ge $(( INFO_HEIGHT + 1 + COLOR_HEIGHT + PROMPT_HEIGHT )) ] && [ -n "$COLOR_COMMANDS" ]; then
				modul_color='true'
			fi

			mode='paper'
		fi

		case $element in
			'INFO')
				if [ "$mode" = 'classic' ] || [ "$used_height" -ge "$TERM_HEIGHT" ]; then
					used_width=$((INFO_WIDTH + SEPARATOR ))
				else
					used_height=$(( used_height + INFO_HEIGHT + 1 ))
				fi
			;;
			'ART')
				if [ "$mode" = 'classic' ] || [ "$used_height" -ge "$TERM_HEIGHT" ]; then
					used_height=$(( PROMPT_HEIGHT + INFO_HEIGHT  + 1 ))
					if [ "$CLASSIC_ART_RIGHT" = 'true' ] && [ "$ART_HEIGHT" -le "$INFO_HEIGHT" ]; then
						used_width='0'
					else
						used_width=$(( ART_WIDTH + SEPARATOR ))
					fi
				else
					[ "$modul_art" = 'true' ] && used_height=$(( used_height + ART_HEIGHT + 1 ))
				fi
			;;
		esac
	}
done

[ "$mode" = 'classic' ] && fetch_classic
[ "$mode" = 'paper'   ] && fetch_paper

printf "\033[?25l\033[?7l\033[0m$print\033[?25h\033[?7h\n"

rm "$TEMPORARY"


exit 0 # 256!!!
